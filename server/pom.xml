<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>cz.festomat.server</groupId>
  <artifactId>festomatServer</artifactId>
  <packaging>war</packaging>
  <version>0.1-SNAPSHOT</version>
  <name>Festomat server</name>

  <!-- Project Settings -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <gwt.version>2.1.0</gwt.version>
    <gwt.style>DETAILED</gwt.style>
    <vaadin.version>6.5.2</vaadin.version>
    <java.source.version>1.6</java.source.version>
    <java.target.version>1.6</java.target.version>
    <gae.version>1.4.0</gae.version>
    <gae.app.name>festomat</gae.app.name>
    <gae.app.email>lhoracek@ninjanuts.cz</gae.app.email>
    <gae.app.version>test</gae.app.version>
    <gae.port>8080</gae.port>
    <downloadSources>true</downloadSources>
    <downloadJavadocs>true</downloadJavadocs>
    <gae.datastore.backing_store>${project.basedir}\datastore.bin</gae.datastore.backing_store>
    <gae.blobstore.backing_store>${project.basedir}\blobstore.bin</gae.blobstore.backing_store>
  </properties>

  <inceptionYear>2011</inceptionYear>

  <profiles>
    <!--
      We can configure our integration server to activate this profile and perform gae:deploy, thus uploading latest snapshot to the 
      http://1.latest.<applicationName>.appspot.com automatically
    -->
    <profile>
      <id>integration-build</id>
      <properties>
        <gae.application.version>stage</gae.application.version>
        <!-- Produce pretty JS during GWT compilation for test environment -->
        <gwt.style>PRETTY</gwt.style>
      </properties>
    </profile>
    <!--
      This profile will activate automatically during release and upload application to the http://2.latest.<applicationName>.appspot.com
      (We might want to set the 2nd version as our applications Default version to be accessible at http://<applicationName>.appspot.com)
    -->
    <profile>
      <id>release-build</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <!--
          During release, set application version in appengine-web.xml to 2
        -->
        <gae.application.version>release</gae.application.version>
        <!--
          Produce compressed JS during GWT compilation for production environment
        -->
        <gwt.style>OBFUSCATED</gwt.style>
      </properties>
    </profile>
  </profiles>

  <build>
    <defaultGoal>install</defaultGoal>
    <finalName>${project.artifactId}</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
    	<plugin>
		  <groupId>org.zeroturnaround</groupId>
		  <artifactId>javarebel-maven-plugin</artifactId>
		  <executions>
		    <execution>
		      <id>generate-rebel-xml</id>
		      <phase>process-resources</phase>
		      <goals>
		        <goal>generate</goal>
		      </goals>
		    </execution>
		  </executions>
		</plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${java.source.version}</source>
          <target>${java.target.version}</target>
          <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
      </plugin>
      <!--
        A hosted mode browser for client-side widget debugging can be run with the goal gwt:run after uncommenting the correct line below. A remote debugger can
         then be connected to port 8998. Note that e.g. a Jetty server should be running with the server side parts - use the goal jetty:run .
      -->
      <!-- Compiles your custom GWT components with the GWT compiler -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <version>2.1.0-1</version>
        <configuration>
          <logLevel>INFO</logLevel>
          <debugSuspend>false</debugSuspend>
          <!-- <port>${gae.port}</port> -->
          <!-- This is for generating Asynch interfaces -->
          <!-- <servicePattern>**/client/*Service.java</servicePattern> -->
          <extraJvmArgs>-Xmx512M -Xss1024k</extraJvmArgs>
          <!-- TODO This should help running GAE stuff in hosted mode (when gwt-maven-plugin-1.2 is released, see http://jira.codehaus.org/browse/MGWT-112)  -->
          <!-- <server>com.google.appengine.tools.development.gwt.AppEngineLauncher</server> -->
          <!-- Tohle bylo dvakrát a nevím které je správné -->
          <!--<runTarget>/index.html</runTarget> -->
          <style>${gwt.style}</style>
          <webXml>war/WEB-INF/web.xml</webXml>
          <!-- this parameter is VERY important with automatic mode - has to match the version in your declared deps   -->
          <!-- if this is set incorrect (not a match), or left out (default is 1.5.2 for 2.0-beta23) you will have mysterious errors  -->
          <gwtVersion>${gwt.version}</gwtVersion>
          <!-- if you don't specify any modules, the plugin will find them -->
          <webappDirectory>${project.build.directory}/${project.build.finalName}/</webappDirectory>
          
          <!-- if you don't specify any modules, the plugin will find them -->
          <modules>
           
          </modules>

          <!-- On Mac running Snow Leopard, add "-d32" -->
          <!-- This causes error messages (but build works) in phase "package": two processes would use the same debug port -->
          <!-- extraJvmArgs>-Xmx512M -Xss1024k -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8998</extraJvmArgs -->
          <runTarget>index.html</runTarget>
          <hostedWebapp>${project.build.directory}/${project.build.finalName}</hostedWebapp>
          <noServer>true</noServer>
          <port>8080</port>
          <soyc>true</soyc>
        </configuration>
        <executions>
          <!--
            <execution> <id>generateAsynch</id>
            <phase>generate-sources</phase> <goals>
            <goal>generateAsync</goal> </goals> </execution>
          -->
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!--  Updates Vaadin 6.2 widgetset definitions based on project   dependencies   -->
       <!--
      <plugin>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <configuration>

            </configuration>
            <goals>
              <goal>update-widgetset</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      -->
      <!--
        launched with the Maven goal jetty:run and stopped with
        jetty:stop
      -->
      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>6.1.19</version>
        <configuration>
          <stopPort>9966</stopPort>
          <stopKey>pluto</stopKey>
          <!-- Redeploy every x seconds if changes are detected, 0 for no automatic redeployment -->
          <scanIntervalSeconds>5</scanIntervalSeconds>
          <!-- make sure Jetty also finds the widgetset -->
          <webAppConfig>
            <contextPath>/festivalServer</contextPath>
            <baseResource implementation="org.mortbay.resource.ResourceCollection">
              <!-- Workaround for Maven/Jetty issue http://jira.codehaus.org/browse/JETTY-680 -->
              <!-- <resources>src/main/webapp,${project.build.directory}/${project.build.finalName}</resources> -->
              <resourcesAsCSV>
                src/main/webapp,${project.build.directory}/${project.build.finalName}</resourcesAsCSV>
            </baseResource>
          </webAppConfig>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.1-beta-1</version>
        <configuration>
          <webResources>
            <resource>
              <directory>src/main/webapp</directory>
              <filtering>true</filtering>
              <includes>
                <include>**/appengine-web.xml</include>
              </includes>
            </resource>
          </webResources>
        </configuration>
      </plugin>
      <plugin>
        <groupId>net.kindleit</groupId>
        <artifactId>maven-gae-plugin</artifactId>
        <version>0.7.3</version>
        <configuration> 
		    <jvmFlags> 
		      <jvmFlag>-Ddatastore.backing_store=${gae.datastore.backing_store}</jvmFlag>
		      <jvmFlag>-Dblobstore.backing_store=${gae.datastore.backing_store}</jvmFlag> 
		    </jvmFlags> 
		  </configuration> 
      </plugin>
      <!--
        Upload application to the appspot automatically, during
        release:perform
      -->
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <goals>gae:deploy</goals>
        </configuration>
      </plugin>

    <plugin>
        <groupId>org.datanucleus</groupId>
        <artifactId>maven-datanucleus-plugin</artifactId>
        <version>1.1.4</version>
        <configuration>
            <mappingIncludes>cz/festomat/server/model/**/*.class</mappingIncludes>
            <verbose>true</verbose>
            <enhancerName>ASM</enhancerName>
            <api>JDO</api>
        </configuration>
        <executions>
            <execution>
                <phase>compile</phase>
                <goals>
                    <goal>enhance</goal>
                </goals>
            </execution>
        </executions>
    </plugin>
    </plugins>    
  </build>

  <repositories>
    <repository>
      <id>gwt-maven</id>
      <url>http://gwt-maven.googlecode.com/svn/trunk/mavenrepo/</url>
    </repository>
    <repository>
      <id>vaadin-snapshots</id>
      <url>http://oss.sonatype.org/content/repositories/vaadin/</url>
    </repository>
	<repository>
	   <id>vaadin-addons</id>
	   <url>http://maven.vaadin.com/vaadin-addons</url>
	</repository>    
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>mojo-snapshots</id>
      <url>http://snapshots.repository.codehaus.org/</url>
    </pluginRepository>
    <pluginRepository>
      <id>vaadin-snapshots</id>
      <url>http://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>
    <!--
      jars from GAE's "lib/user" must be added as compile-time
      dependencies, as described here in "Copying JARs" section:
      http://code.google.com/appengine/docs/java/tools/ant.html
    -->
    <dependency>
      <groupId>javax.jdo</groupId>
      <artifactId>jdo2-api</artifactId>
      <version>2.3-eb</version>   
      <exclusions>
        <exclusion>
          <groupId>javax.transaction</groupId>
          <artifactId>transaction-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>com.google.appengine.orm</groupId>
      <artifactId>datanucleus-appengine</artifactId>
      <version>1.0.8</version>
    </dependency>
    
    <dependency>
      <groupId>org.datanucleus</groupId>
      <artifactId>datanucleus-jpa</artifactId>
      <version>1.1.5</version>
    </dependency>

    <dependency>
      <groupId>org.datanucleus</groupId>
      <artifactId>datanucleus-core</artifactId>
      <version>1.1.5</version>
      <exclusions>
        <exclusion>
          <groupId>javax.transaction</groupId>
          <artifactId>transaction-api</artifactId>
        </exclusion>
      </exclusions>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>javax.transaction</groupId>
      <artifactId>jta</artifactId>
      <version>1.1</version>
    </dependency>

    <dependency>
      <groupId>javax.persistence</groupId>
      <artifactId>persistence-api</artifactId>
      <version>1.0</version>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-1.0-sdk</artifactId>
      <version>${gae.version}</version>
    </dependency>

    <dependency>
        <groupId>net.sf.ehcache</groupId>
        <artifactId>ehcache-jcache</artifactId>
        <version>1.2</version>
    </dependency>
    
    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-jsr107cache</artifactId>
      <version>${gae.version}</version>
    </dependency>

    
    <!--
      GAE libraries for local testing as described here:
      http://code.google.com/appengine/docs/java/howto/unittesting.html
    -->
    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-labs</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-stubs</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-testing</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>    

    <!-- GWT dependencies -->
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-servlet</artifactId>
      <version>${gwt.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
      <version>${gwt.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- VAADIN dependency -->
    <dependency>
      <groupId>com.vaadin</groupId>
      <artifactId>vaadin</artifactId>
      <version>${vaadin.version}</version>
    </dependency>

	<!-- VAADIN Add-ons -->
	
    <dependency>
       <groupId>fi.abo</groupId>
       <artifactId>gaecontainer</artifactId>
       <version>0.6.1</version>
    </dependency>
    
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>1.7.1</version>
	</dependency>

    <!--
      J2EE Servlet API. We need it to compile IndexServlet class. You
      can probably remove it, if you don't explicitly use Servlets
    -->
    <dependency>
      <groupId>org.apache.geronimo.specs</groupId>
      <artifactId>geronimo-servlet_2.5_spec</artifactId>
      <version>1.2</version>
      <scope>provided</scope>
    </dependency>

    <!-- Make use of JSP tags. Remove, if you don't use JSPs -->
    <dependency>
      <artifactId>standard</artifactId>
      <groupId>taglibs</groupId>
      <version>1.1.2</version>
      <type>jar</type>
      <scope>runtime</scope>
    </dependency>

    <!-- These dependencies are here just for enabling logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.6.0</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>0.9.22</version>
    </dependency>

    <!-- Test scope -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.5</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>